#!/usr/bin/env node

/**
 * Standalone K6 USSD Load Test Script
 * Generated by USSD Editor
 * 
 * Usage:
 * 1. Install K6: https://k6.io/docs/getting-started/installation/
 * 2. Update configuration below
 * 3. Run: k6 run ussd-load-test.js
 */

import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';

// ========================
// CONFIGURATION SECTION
// ========================

const CONFIG = {
  // USSD Gateway Configuration
  BASE_URL: 'http://localhost:80',
  ENDPOINT: '/MenuManagement/RequestReceiver', 
  LOGIN: 'Ussd_Bearer1',
  PASSWORD: 'test',
  
  // Test Data Configuration
  PHONE_PREFIX: '777',
  SESSION_ID_PREFIX: '99',
  
  // Load Test Configuration
  LOAD_PROFILE: 'moderate', // light, moderate, heavy, stress
  
  // Response Validation
  ENABLE_RESPONSE_VALIDATION: true,
  MAX_RESPONSE_TIME: 3000, // milliseconds
  
  // Debug Configuration
  ENABLE_DEBUG_LOGGING: false,
  LOG_ALL_RESPONSES: false,
};

// ========================
// FLOW SCENARIOS
// ========================

// Generated from your USSD flow - Update this section with your actual flow paths
const FLOW_SCENARIOS = [
  {
    name: "Balance_Inquiry_Flow",
    description: "Check account balance",
    startInput: "123", // Your START node USSD code
    inputs: ["1"], // Sequence of inputs to traverse the flow
    weight: 40 // 40% of traffic
  },
  {
    name: "Transfer_Money_Flow", 
    description: "Transfer money to another account",
    startInput: "123",
    inputs: ["2", "1234567890", "100", "1"], // Menu option, phone, amount, confirm
    weight: 30 // 30% of traffic
  },
  {
    name: "Account_History_Flow",
    description: "View account transaction history", 
    startInput: "123",
    inputs: ["3"],
    weight: 20 // 20% of traffic
  },
  {
    name: "Help_Flow",
    description: "Get help information",
    startInput: "123", 
    inputs: ["4"],
    weight: 10 // 10% of traffic
  }
];

// ========================
// LOAD PROFILES
// ========================

const LOAD_PROFILES = {
  light: {
    stages: [
      { duration: '30s', target: 5 },   // Ramp up to 5 users
      { duration: '2m', target: 5 },    // Stay at 5 users
      { duration: '30s', target: 10 },  // Ramp up to 10 users  
      { duration: '1m', target: 10 },   // Stay at 10 users
      { duration: '30s', target: 0 },   // Ramp down
    ]
  },
  moderate: {
    stages: [
      { duration: '1m', target: 20 },   // Ramp up to 20 users
      { duration: '3m', target: 20 },   // Stay at 20 users
      { duration: '1m', target: 50 },   // Ramp up to 50 users
      { duration: '2m', target: 50 },   // Stay at 50 users
      { duration: '1m', target: 0 },    // Ramp down
    ]
  },
  heavy: {
    stages: [
      { duration: '2m', target: 50 },   // Ramp up to 50 users
      { duration: '5m', target: 100 },  // Ramp up to 100 users
      { duration: '2m', target: 200 },  // Ramp up to 200 users
      { duration: '3m', target: 200 },  // Stay at 200 users
      { duration: '2m', target: 0 },    // Ramp down
    ]
  },
  stress: {
    stages: [
      { duration: '2m', target: 100 },  // Quick ramp to 100
      { duration: '5m', target: 300 },  // Ramp to 300 users
      { duration: '3m', target: 500 },  // Push to 500 users
      { duration: '5m', target: 500 },  // Maintain stress level
      { duration: '3m', target: 0 },    // Ramp down
    ]
  }
};

// ========================
// METRICS SETUP
// ========================

const errorRate = new Rate('errors');
const sessionDuration = new Trend('session_duration');
const flowCompletionRate = new Rate('flow_completion');
const ussdRequestDuration = new Trend('ussd_request_duration');
const invalidResponseRate = new Rate('invalid_responses');
const timeoutRate = new Rate('timeouts');
const totalSessions = new Counter('total_sessions');
const successfulSessions = new Counter('successful_sessions');

// ========================
// TEST OPTIONS
// ========================

export const options = {
  stages: LOAD_PROFILES[CONFIG.LOAD_PROFILE].stages,
  
  thresholds: {
    http_req_duration: ['p(95)<3000', 'p(99)<5000'], // 95% under 3s, 99% under 5s
    http_req_failed: ['rate<0.1'],                    // Error rate under 10%
    errors: ['rate<0.05'],                            // Custom error rate under 5%
    flow_completion: ['rate>0.9'],                    // Flow completion above 90%
    ussd_request_duration: ['p(95)<2000'],            // USSD requests under 2s
    invalid_responses: ['rate<0.02'],                 // Invalid responses under 2%
    timeouts: ['rate<0.01'],                          // Timeouts under 1%
  },
  
  // Set maximum test duration as safety net
  maxDuration: '30m',
};

// ========================
// UTILITY FUNCTIONS
// ========================

function generatePhoneNumber() {
  const suffix = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
  return CONFIG.PHONE_PREFIX + suffix;
}

function generateSessionId() {
  return CONFIG.SESSION_ID_PREFIX + Math.floor(Math.random() * 100000000);
}

function selectScenario() {
  const random = Math.random() * 100;
  let cumulativeWeight = 0;
  
  for (const scenario of FLOW_SCENARIOS) {
    cumulativeWeight += scenario.weight;
    if (random <= cumulativeWeight) {
      return scenario;
    }
  }
  
  return FLOW_SCENARIOS[0]; // Fallback
}

function debugLog(message, data = null) {
  if (CONFIG.ENABLE_DEBUG_LOGGING) {
    const timestamp = new Date().toISOString();
    if (data) {
      console.log(`[${timestamp}] ${message}:`, JSON.stringify(data));
    } else {
      console.log(`[${timestamp}] ${message}`);
    }
  }
}

// ========================
// USSD REQUEST FUNCTION
// ========================

function makeUSSDRequest(sessionId, msisdn, input, newRequest = 0) {
  const startTime = Date.now();
  
  const params = {
    LOGIN: CONFIG.LOGIN,
    PASSWORD: CONFIG.PASSWORD,
    SESSION_ID: sessionId,
    MSISDN: msisdn,
    NewRequest: newRequest,
    INPUT: input
  };
  
  const queryString = Object.entries(params)
    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
    .join('&');
  
  const fullUrl = `${CONFIG.BASE_URL}${CONFIG.ENDPOINT}?${queryString}`;
  
  debugLog(`Making USSD request`, {
    sessionId,
    msisdn,
    input,
    newRequest,
    url: fullUrl
  });
  
  try {
    const response = http.get(fullUrl, {
      timeout: `${CONFIG.MAX_RESPONSE_TIME}ms`,
      tags: {
        endpoint: 'ussd_request',
        input_type: newRequest === 1 ? 'start' : 'continue'
      }
    });
    
    const duration = Date.now() - startTime;
    ussdRequestDuration.add(duration);
    
    if (CONFIG.LOG_ALL_RESPONSES) {
      console.log(`[${new Date().toISOString()}] ${input} -> ${response.status} (${duration}ms)`);
      console.log(`Response: ${response.body ? response.body.substring(0, 100) : 'No body'}...`);
    }
    
    // Check for timeout
    if (duration >= CONFIG.MAX_RESPONSE_TIME) {
      timeoutRate.add(1);
      debugLog(`Request timed out`, { duration, sessionId });
    } else {
      timeoutRate.add(0);
    }
    
    return { response, duration, success: true };
    
  } catch (error) {
    const duration = Date.now() - startTime;
    
    debugLog(`Request failed`, {
      error: error.message,
      duration,
      sessionId,
      input
    });
    
    errorRate.add(1);
    timeoutRate.add(1);
    
    return { 
      response: null, 
      duration, 
      success: false, 
      error: error.message 
    };
  }
}

// ========================
// RESPONSE VALIDATION
// ========================

function validateUSSDResponse(response, context = {}) {
  if (!CONFIG.ENABLE_RESPONSE_VALIDATION) {
    return { valid: true, checks: {} };
  }
  
  const checks = {
    'status is 200': (r) => r && r.status === 200,
    'response has body': (r) => r && r.body && r.body.length > 0,
    'response time acceptable': (r) => r && r.timings.duration < CONFIG.MAX_RESPONSE_TIME,
  };
  
  let valid = true;
  const results = {};
  
  if (response && response.body) {
    const body = response.body.toLowerCase();
    
    // Check for error indicators
    const errorKeywords = ['error', 'invalid', 'failed', 'wrong', 'timeout', 'service unavailable'];
    const hasError = errorKeywords.some(keyword => body.includes(keyword));
    
    checks['no error indicators'] = (r) => !hasError;
    
    // Check for valid USSD content
    const validKeywords = ['menu', 'select', 'balance', 'account', 'thank', 'success', 'choose', 'enter'];
    const hasValidContent = validKeywords.some(keyword => body.includes(keyword));
    
    checks['contains valid content'] = (r) => hasValidContent || body.length > 10;
    
    if (hasError) {
      invalidResponseRate.add(1);
      debugLog(`Invalid response detected`, {
        body: body.substring(0, 200),
        context
      });
    } else {
      invalidResponseRate.add(0);
    }
  }
  
  // Execute checks
  Object.entries(checks).forEach(([name, checkFn]) => {
    try {
      const result = checkFn(response);
      results[name] = result;
      if (!result) valid = false;
    } catch (error) {
      results[name] = false;
      valid = false;
    }
  });
  
  // Use k6's check function for built-in reporting
  const k6CheckResult = check(response, checks);
  
  return { valid: valid && k6CheckResult, checks: results };
}

// ========================
// MAIN TEST FUNCTION
// ========================

export default function () {
  const phoneNumber = generatePhoneNumber();
  const sessionId = generateSessionId();
  const scenario = selectScenario();
  
  totalSessions.add(1);
  
  debugLog(`Starting scenario: ${scenario.name}`, {
    phoneNumber,
    sessionId,
    scenario: scenario.name
  });
  
  const sessionStart = Date.now();
  let flowCompleted = false;
  let stepsFailed = 0;
  
  try {
    // Step 1: Initiate USSD session
    console.log(`🟦 [${phoneNumber}] Starting ${scenario.description}`);
    
    const { response: startResponse, duration: startDuration, success: startSuccess } = makeUSSDRequest(
      sessionId, 
      phoneNumber, 
      scenario.startInput, 
      1 // NewRequest = 1 for new session
    );
    
    if (!startSuccess) {
      errorRate.add(1);
      flowCompletionRate.add(0);
      return;
    }
    
    const startValidation = validateUSSDResponse(startResponse, { 
      step: 'start', 
      scenario: scenario.name 
    });
    
    if (!startValidation.valid) {
      errorRate.add(1);
      flowCompletionRate.add(0);
      stepsFailed++;
      debugLog(`Start step validation failed`, startValidation.checks);
      return;
    }
    
    // Think time after start (simulate user reading menu)
    sleep(1 + Math.random() * 2);
    
    // Step 2: Process each input in the flow sequence
    for (let i = 0; i < scenario.inputs.length; i++) {
      const input = scenario.inputs[i];
      const stepNumber = i + 2;
      
      debugLog(`Executing step ${stepNumber}`, { input, scenario: scenario.name });
      
      const { response, duration, success } = makeUSSDRequest(
        sessionId,
        phoneNumber,
        input,
        0 // NewRequest = 0 for continuing session
      );
      
      if (!success) {
        errorRate.add(1);
        stepsFailed++;
        console.log(`❌ [${phoneNumber}] Step ${stepNumber} failed - ${input}`);
        break;
      }
      
      const validation = validateUSSDResponse(response, { 
        step: stepNumber, 
        input,
        scenario: scenario.name 
      });
      
      if (!validation.valid) {
        errorRate.add(1);
        stepsFailed++;
        console.log(`❌ [${phoneNumber}] Step ${stepNumber} validation failed - ${input}`);
        debugLog(`Step validation failed`, {
          step: stepNumber,
          input,
          checks: validation.checks
        });
        break;
      }
      
      // Check if this is the last step
      if (i === scenario.inputs.length - 1) {
        flowCompleted = true;
        successfulSessions.add(1);
        console.log(`✅ [${phoneNumber}] ${scenario.description} completed successfully`);
      }
      
      // Think time between steps (simulate user input time)
      const thinkTime = 0.5 + Math.random() * 1.5;
      sleep(thinkTime);
    }
    
    // Record flow completion
    flowCompletionRate.add(flowCompleted ? 1 : 0);
    
    // Record session duration
    const sessionEnd = Date.now();
    const totalSessionDuration = sessionEnd - sessionStart;
    sessionDuration.add(totalSessionDuration);
    
    debugLog(`Session completed`, {
      phoneNumber,
      sessionId,
      scenario: scenario.name,
      completed: flowCompleted,
      duration: totalSessionDuration,
      stepsFailed
    });
    
    // If flow completed successfully, chance to start another flow
    if (flowCompleted && Math.random() < 0.3) { // 30% chance
      console.log(`🔄 [${phoneNumber}] Starting additional flow`);
      sleep(2 + Math.random() * 3);
      // Note: In a real scenario, this could recursively call the main function
      // or start a new session with a different scenario
    }
    
  } catch (error) {
    console.error(`💥 [${phoneNumber}] Unexpected error in ${scenario.name}:`, error.message);
    errorRate.add(1);
    flowCompletionRate.add(0);
    
    debugLog(`Unexpected error`, {
      error: error.message,
      stack: error.stack,
      scenario: scenario.name,
      phoneNumber
    });
  }
  
  // Inter-scenario pause (simulate real user behavior)
  const pauseTime = 2 + Math.random() * 3;
  sleep(pauseTime);
}

// ========================
// SETUP & TEARDOWN
// ========================

export function setup() {
  console.log('🚀 USSD Load Test Starting');
  console.log('================================');
  console.log(`Target: ${CONFIG.BASE_URL}${CONFIG.ENDPOINT}`);
  console.log(`Load Profile: ${CONFIG.LOAD_PROFILE}`);
  console.log(`Scenarios: ${FLOW_SCENARIOS.length}`);
  console.log(`Max Response Time: ${CONFIG.MAX_RESPONSE_TIME}ms`);
  console.log(`Debug Logging: ${CONFIG.ENABLE_DEBUG_LOGGING ? 'ON' : 'OFF'}`);
  console.log('================================');
  
  // Test connectivity
  const testUrl = `${CONFIG.BASE_URL}${CONFIG.ENDPOINT}?LOGIN=${CONFIG.LOGIN}&PASSWORD=${CONFIG.PASSWORD}&SESSION_ID=test&MSISDN=1234567890&NewRequest=1&INPUT=test`;
  
  try {
    const testResponse = http.get(testUrl, { timeout: '10s' });
    console.log(`✅ Connectivity test: ${testResponse.status}`);
  } catch (error) {
    console.log(`⚠️  Connectivity test failed: ${error.message}`);
  }
  
  return {
    timestamp: new Date().toISOString(),
    config: CONFIG,
    scenarios: FLOW_SCENARIOS.length
  };
}

export function teardown(data) {
  console.log('');
  console.log('📊 USSD Load Test Summary');
  console.log('========================');
  console.log(`Started: ${data.timestamp}`);
  console.log(`Duration: ${new Date().toISOString()}`);
  console.log(`Scenarios: ${data.scenarios}`);
  console.log(`Load Profile: ${data.config.LOAD_PROFILE}`);
  console.log('========================');
  console.log('✅ Test completed successfully');
}

// ========================
// RESULT HANDLING
// ========================

export function handleSummary(data) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  return {
    [`ussd-load-test-results-${timestamp}.json`]: JSON.stringify(data, null, 2),
    [`ussd-load-test-summary-${timestamp}.txt`]: textSummary(data, { indent: ' ', enableColors: false }),
    stdout: textSummary(data, { indent: ' ', enableColors: true }),
  };
}

// ========================
// USAGE INSTRUCTIONS
// ========================

/*
USAGE INSTRUCTIONS:
==================

1. INSTALLATION:
   - Install K6: https://k6.io/docs/getting-started/installation/
   - On Windows: choco install k6
   - On macOS: brew install k6  
   - On Linux: See K6 documentation

2. CONFIGURATION:
   - Update the CONFIG section above with your USSD gateway details
   - Modify FLOW_SCENARIOS to match your actual USSD flow paths
   - Adjust LOAD_PROFILES if needed for your testing requirements

3. RUNNING THE TEST:
   - Basic run: k6 run ussd-load-test.js
   - With custom load: k6 run --stage 1m:10,5m:20,1m:0 ussd-load-test.js
   - With environment variables: k6 run -e BASE_URL=http://prod-server ussd-load-test.js
   - Generate HTML report: k6 run --out json=results.json ussd-load-test.js

4. MONITORING:
   - Real-time monitoring: k6 run --out influxdb=http://localhost:8086/k6 ussd-load-test.js
   - Grafana dashboard: Use K6 Grafana dashboard templates
   - Cloud monitoring: k6 cloud ussd-load-test.js (requires K6 Cloud account)

5. CUSTOMIZATION:
   - Add custom metrics for business-specific measurements
   - Implement data-driven testing with CSV files
   - Add custom validation rules for your USSD responses
   - Extend scenarios for complex user journeys

6. TROUBLESHOOTING:
   - Enable debug logging: Set ENABLE_DEBUG_LOGGING to true
   - Enable response logging: Set LOG_ALL_RESPONSES to true  
   - Check connectivity: Verify BASE_URL and ENDPOINT
   - Validate credentials: Ensure LOGIN and PASSWORD are correct

For more information, visit: https://k6.io/docs/
*/
